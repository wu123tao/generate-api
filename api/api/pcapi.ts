/* tslint:disable */
/* eslint-disable */
/**
 * V-PLUS
 * <div_style=\'font-size:14px;color:red;\'>RESTFUL_APIS</div>
 *
 * The version of the OpenAPI document: 1.0
 * Contact: xxx@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { GET, POST } from '../base';

// @ts-ignore
import type { DictDto } from '../interface';
// @ts-ignore
import type { DictItemDto } from '../interface';
// @ts-ignore
import type { IdsDto } from '../interface';
// @ts-ignore
import type { PermissionDto } from '../interface';
// @ts-ignore
import type { ResponseDataBoolean } from '../interface';
// @ts-ignore
import type { ResponseDataIPageDictItemVo } from '../interface';
// @ts-ignore
import type { ResponseDataIPageDictVo } from '../interface';
// @ts-ignore
import type { ResponseDataIPageRoleDto } from '../interface';
// @ts-ignore
import type { ResponseDataListLabelValueVo } from '../interface';
// @ts-ignore
import type { ResponseDataObject } from '../interface';
// @ts-ignore
import type { ResponseDataString } from '../interface';
// @ts-ignore
import type { RoleVo } from '../interface';

/**
 * 
 * @summary 删除
 * @tags PC-基础管理-字典表管理
 * @param {IdsDto} [idsDto] 
  
 * @return { ResponseDataBoolean }
 */
export function deleteUsingPOST(data:IdsDto): Promise<ResponseDataBoolean['data']> {
    const path = `/api/v1/sys/dict/delete`;

    let localVarQueryParameter = { params: { ...data }} as any;

    localVarQueryParameter = data;

    return POST(path, localVarQueryParameter);
}

/**
 * 
 * @summary 删除
 * @tags PC-基础管理-字典项管理
 * @param {IdsDto} [idsDto] 
  
 * @return { ResponseDataBoolean }
 */
export function deleteUsingPOST1(data:IdsDto): Promise<ResponseDataBoolean['data']> {
    const path = `/api/v1/sys/dictItem/delete`;

    let localVarQueryParameter = { params: { ...data }} as any;

    localVarQueryParameter = data;

    return POST(path, localVarQueryParameter);
}

/**
 * 
 * @summary 删除
 * @tags PC-基础管理-角色管理
 * @param {IdsDto} [idsDto] 
  
 * @return { ResponseDataBoolean }
 */
export function deleteUsingPOST2(data:IdsDto): Promise<ResponseDataBoolean['data']> {
    const path = `/api/v1/user/role/delete`;

    let localVarQueryParameter = { params: { ...data }} as any;

    localVarQueryParameter = data;

    return POST(path, localVarQueryParameter);
}

/**
 * 
 * @summary 字典项下拉
 * @tags PC-基础管理-字典项管理
 * @param {string} dictKey 字典key
  
 * @return { ResponseDataListLabelValueVo }
 */
export function dropDownUsingGET(data:{ dictKey: string; }): Promise<ResponseDataListLabelValueVo['data']> {
    const path = `/api/v1/sys/dictItem/dropDown`;

    let localVarQueryParameter = { params: { ...data }} as any;


    return GET(path, localVarQueryParameter);
}

/**
 * 
 * @summary 修改
 * @tags PC-基础管理-字典表管理
 * @param {DictDto} [dictDto] 
  
 * @return { ResponseDataBoolean }
 */
export function editUsingPOST(data:DictDto): Promise<ResponseDataBoolean['data']> {
    const path = `/api/v1/sys/dict/edit`;

    let localVarQueryParameter = { params: { ...data }} as any;

    localVarQueryParameter = data;

    return POST(path, localVarQueryParameter);
}

/**
 * 
 * @summary 修改
 * @tags PC-基础管理-字典项管理
 * @param {DictItemDto} [dictItemDto] 
  
 * @return { ResponseDataBoolean }
 */
export function editUsingPOST1(data:DictItemDto): Promise<ResponseDataBoolean['data']> {
    const path = `/api/v1/sys/dictItem/edit`;

    let localVarQueryParameter = { params: { ...data }} as any;

    localVarQueryParameter = data;

    return POST(path, localVarQueryParameter);
}

/**
 * 
 * @summary 新增/修改
 * @tags PC-基础管理-角色管理
 * @param {RoleVo} [roleVo] 
  
 * @return { ResponseDataBoolean }
 */
export function editUsingPOST2(data:RoleVo): Promise<ResponseDataBoolean['data']> {
    const path = `/api/v1/user/role/edit`;

    let localVarQueryParameter = { params: { ...data }} as any;

    localVarQueryParameter = data;

    return POST(path, localVarQueryParameter);
}

/**
 * 给角色授权
 * @summary app授权
 * @tags PC-基础管理-权限管理
 * @param {PermissionDto} [permissionDto] 
  
 * @return { ResponseDataBoolean }
 */
export function empowerAppUsingPOST(data:PermissionDto): Promise<ResponseDataBoolean['data']> {
    const path = `/api/v1/user/permission/empowerApp`;

    let localVarQueryParameter = { params: { ...data }} as any;

    localVarQueryParameter = data;

    return POST(path, localVarQueryParameter);
}

/**
 * 给角色授权
 * @summary pc授权
 * @tags PC-基础管理-权限管理
 * @param {PermissionDto} [permissionDto] 
  
 * @return { ResponseDataBoolean }
 */
export function empowerPcUsingPOST(data:PermissionDto): Promise<ResponseDataBoolean['data']> {
    const path = `/api/v1/user/permission/empowerPC`;

    let localVarQueryParameter = { params: { ...data }} as any;

    localVarQueryParameter = data;

    return POST(path, localVarQueryParameter);
}

/**
 * 给角色授权
 * @summary 授权
 * @tags PC-基础管理-权限管理
 * @param {PermissionDto} [permissionDto] 
  
 * @return { ResponseDataBoolean }
 */
export function empowerUsingPOST(data:PermissionDto): Promise<ResponseDataBoolean['data']> {
    const path = `/api/v1/user/permission/empower`;

    let localVarQueryParameter = { params: { ...data }} as any;

    localVarQueryParameter = data;

    return POST(path, localVarQueryParameter);
}

/**
 * 
 * @summary 新增（仅字典管理模块调用）
 * @tags PC-基础管理-字典表管理
 * @param {DictDto} [dictDto] 
  
 * @return { ResponseDataBoolean }
 */
export function insertUsingPOST(data:DictDto): Promise<ResponseDataBoolean['data']> {
    const path = `/api/v1/sys/dict/insert`;

    let localVarQueryParameter = { params: { ...data }} as any;

    localVarQueryParameter = data;

    return POST(path, localVarQueryParameter);
}

/**
 * 
 * @summary 新增
 * @tags PC-基础管理-字典项管理
 * @param {DictItemDto} [dictItemDto] 
  
 * @return { ResponseDataBoolean }
 */
export function insertUsingPOST1(data:DictItemDto): Promise<ResponseDataBoolean['data']> {
    const path = `/api/v1/sys/dictItem/insert`;

    let localVarQueryParameter = { params: { ...data }} as any;

    localVarQueryParameter = data;

    return POST(path, localVarQueryParameter);
}

/**
 * 
 * @summary 根据字典key和字典项名称查询字典项id
 * @tags PC-基础管理-字典项管理
 * @param {string} dictKey 字典key
  * @param {string} itemName 字典表子项名
  
 * @return { ResponseDataString }
 */
export function selectItemIdUsingGET(data:{ dictKey: string; itemName: string; }): Promise<ResponseDataString['data']> {
    const path = `/api/v1/sys/dictItem/selectItemId`;

    let localVarQueryParameter = { params: { ...data }} as any;


    return GET(path, localVarQueryParameter);
}

/**
 * 
 * @summary 根据字典表子项id查询字典项表名称
 * @tags PC-基础管理-字典项管理
 * @param {string} itemId 字典表子项id
  
 * @return { ResponseDataString }
 */
export function selectItemNameUsingGET(data:{ itemId: string; }): Promise<ResponseDataString['data']> {
    const path = `/api/v1/sys/dictItem/selectItemName`;

    let localVarQueryParameter = { params: { ...data }} as any;


    return GET(path, localVarQueryParameter);
}

/**
 * 
 * @summary 根据字典key查询字典项
 * @tags PC-基础管理-字典项管理
 * @param {string} [dictId] 字典id
  * @param {string} [dictKey] 字典key
  * @param {string} [endDateTime] 结束时间,不需要前端传，用于后端转换存储值
  * @param {string} [endTime] 结束时间
  * @param {string} [id] id
  * @param {number} [limit] 数量
  * @param {string} [name] 字典项名称
  * @param {number} [page] 页码
  * @param {string} [s] 模糊查询
  * @param {string} [startDateTime] 开始时间,不需要前端传，用于后端转换存储值
  * @param {string} [startTime] 开始时间
  
 * @return { ResponseDataIPageDictItemVo }
 */
export function selectItemUsingGET(data:{ dictId?: string; dictKey?: string; endDateTime?: string; endTime?: string; id?: string; limit?: number; name?: string; page?: number; s?: string; startDateTime?: string; startTime?: string; }): Promise<ResponseDataIPageDictItemVo['data']> {
    const path = `/api/v1/sys/dictItem/getByDictKey`;

    let localVarQueryParameter = { params: { ...data }} as any;


    return GET(path, localVarQueryParameter);
}

/**
 * 
 * @summary 分页查询
 * @tags PC-基础管理-字典表管理
 * @param {string} [dictName] 字典名称
  * @param {string} [endDateTime] 结束时间,不需要前端传，用于后端转换存储值
  * @param {string} [endTime] 结束时间
  * @param {boolean} [fixed] 是否固定_0否_1是
  * @param {number} [limit] 数量
  * @param {number} [page] 页码
  * @param {string} [remark] 备注
  * @param {string} [s] 模糊查询
  * @param {string} [startDateTime] 开始时间,不需要前端传，用于后端转换存储值
  * @param {string} [startTime] 开始时间
  
 * @return { ResponseDataIPageDictVo }
 */
export function selectUsingGET(data:{ dictName?: string; endDateTime?: string; endTime?: string; fixed?: boolean; limit?: number; page?: number; remark?: string; s?: string; startDateTime?: string; startTime?: string; }): Promise<ResponseDataIPageDictVo['data']> {
    const path = `/api/v1/sys/dict/select`;

    let localVarQueryParameter = { params: { ...data }} as any;


    return GET(path, localVarQueryParameter);
}

/**
 * 根据角色ID获取权限详情
 * @summary 权限查询
 * @tags PC-基础管理-权限管理
 * @param {string} roleId 角色id
  * @param {number} permissionType 用户权限类型
  
 * @return { ResponseDataObject }
 */
export function selectUsingGET1(data:{ roleId: string; permissionType: number; }): Promise<ResponseDataObject['data']> {
    const path = `/api/v1/user/permission/list`;

    let localVarQueryParameter = { params: { ...data }} as any;


    return GET(path, localVarQueryParameter);
}

/**
 * 
 * @summary 分页查询
 * @tags PC-基础管理-角色管理
 * @param {string} [endDateTime] 结束时间,不需要前端传，用于后端转换存储值
  * @param {string} [endTime] 结束时间
  * @param {number} [limit] 数量
  * @param {number} [page] 页码
  * @param {string} [roleCode] 角色编码
  * @param {string} [roleName] 角色名
  * @param {string} [s] 模糊查询
  * @param {string} [startDateTime] 开始时间,不需要前端传，用于后端转换存储值
  * @param {string} [startTime] 开始时间
  
 * @return { ResponseDataIPageRoleDto }
 */
export function selectUsingGET2(data:{ endDateTime?: string; endTime?: string; limit?: number; page?: number; roleCode?: string; roleName?: string; s?: string; startDateTime?: string; startTime?: string; }): Promise<ResponseDataIPageRoleDto['data']> {
    const path = `/api/v1/user/role/select`;

    let localVarQueryParameter = { params: { ...data }} as any;


    return GET(path, localVarQueryParameter);
}

